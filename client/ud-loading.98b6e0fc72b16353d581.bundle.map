{"version":3,"sources":["webpack:///./src/app/ud-loading.jsx"],"names":["Loading","state","loadingOpts","showSplash","textColor","backgroundColor","text","cancelData","$","css","fetchGet","json","propsToSet","Object","assign","undefined","htmlColor","setState","setColors","bind","height","width","display","minHeight","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;IAEqBA,O;;;;;AAEjB,qBAAc;AAAA;;AAAA;;AACV;AAEA,UAAKC,KAAL,GAAa;AACTC,iBAAW,EAAE,IADJ;AAETC,gBAAU,EAAE,IAFH;AAGTC,eAAS,EAAE,SAHF;AAITC,qBAAe,EAAE,SAJR;AAKTC,UAAI,EAAE,gCALG;AAMTC,gBAAU,EAAE;AANH,KAAb;AAHU;AAWb;;;;yCACoB,CACpB;;;wCAEmB,CACjB;AACF;;;2CAEqB;AAClB,WAAKN,KAAL,CAAWM,UAAX,GAAwB,IAAxB;AACH;;;gCAEU;AACPC,OAAC,CAAC,iBAAD,CAAD,CAAqBC,GAArB,CAAyB,OAAzB,EAAkC,KAAKR,KAAL,CAAWG,SAA7C;AACAI,OAAC,CAAC,iBAAD,CAAD,CAAqBC,GAArB,CAAyB,kBAAzB,EAA6C,KAAKR,KAAL,CAAWI,eAAxD,EAFO,CAGP;AACA;AACH;;;+BAEU;AACPK,0FAAQ,CAAC,wCAAD,EAA2C,UAASC,IAAT,EAAc;AAC7D,YAAG,KAAKV,KAAL,CAAWM,UAAd,EAAyB;AACrB;AACH;;AACD,YAAIK,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKb,KAAvB,CAAjB;;AAEA,YAAGU,IAAI,CAACR,UAAL,KAAoB,IAApB,IAA4BQ,IAAI,CAACR,UAAL,KAAoBY,SAAnD,EAA6D;AACzDH,oBAAU,CAACT,UAAX,GAAwBQ,IAAI,CAACR,UAA7B;AACH;;AACD,YAAGQ,IAAI,CAACN,eAAL,IAAwBM,IAAI,CAACN,eAAL,KAAyB,IAApD,EAAyD;AACrDO,oBAAU,CAACP,eAAX,GAA6BM,IAAI,CAACN,eAAL,CAAqBW,SAAlD;AACH;;AACD,YAAGL,IAAI,CAACP,SAAR,EAAkB;AACdQ,oBAAU,CAACR,SAAX,GAAuBO,IAAI,CAACP,SAAL,CAAeY,SAAtC;AACH;;AACD,YAAGL,IAAI,CAACL,IAAR,EAAa;AACTM,oBAAU,CAACN,IAAX,GAAkBK,IAAI,CAACL,IAAvB;AACH;;AACDM,kBAAU,CAACV,WAAX,GAAyB,KAAzB;;AAEA,YAAG,CAAC,KAAKD,KAAL,CAAWM,UAAf,EAA0B;AACtB,eAAKU,QAAL,CAAcL,UAAd;AAEH;;AACD,aAAKM,SAAL;AACH,OAzBkD,CAyBjDC,IAzBiD,CAyB5C,IAzB4C,CAA3C,CAAR;AA0BH;;;6BAEQ;AACL,aAAO;AAAK,iBAAS,EAAC,gBAAf;AAAgC,aAAK,EAAE;AAACC,gBAAM,EAAE,MAAT;AAAiBC,eAAK,EAAE,MAAxB;AAAgCC,iBAAO,EAAE;AAAzC;AAAvC,SACK,2DAAC,qDAAD;AAAK,aAAK,EAAE;AAACF,gBAAM,EAAE,MAAT;AAAiBG,mBAAS,EAAE,MAA5B;AAAoCD,iBAAO,EAAG,CAAC,KAAKrB,KAAL,CAAWC,WAAZ,IAA2B,KAAKD,KAAL,CAAWE,UAAvC,GAAqD,OAArD,GAA+D;AAA5G;AAAZ,SACI;AAAK,iBAAS,EAAC,6BAAf;AAA6C,aAAK,EAAE;AAACiB,gBAAM,EAAE;AAAT;AAApD,SACI,wEACI,uEAAK,KAAKnB,KAAL,CAAWK,IAAhB,CADJ,EAEI;AAAK,iBAAS,EAAC;AAAf,SACI;AAAK,iBAAS,EAAC;AAAf,QADJ,CAFJ,CADJ,CADJ,CADL,CAAP;AAYH;;;;EA1EgCkB,4CAAK,CAACC,S","file":"ud-loading.98b6e0fc72b16353d581.bundle.js","sourcesContent":["import React from 'react';\r\nimport {Row, Col} from 'react-materialize';\r\nimport {getApiPath,getWsApiPath} from 'config';\r\nimport {fetchGet} from './services/fetch-service.jsx';\r\n\r\nexport default class Loading extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            loadingOpts: true,\r\n            showSplash: true, \r\n            textColor: '#FFFFFF',\r\n            backgroundColor: \"#252525\", \r\n            text: \"PowerShell Universal Dashboard\",            \r\n            cancelData: false\r\n        }\r\n    }    \r\n    componentWillMount() {        \r\n    }\r\n\r\n    componentDidMount() {        \r\n       //this.loadData();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.state.cancelData = true;\r\n    }\r\n\r\n    setColors(){\r\n        $('.loadingWrapper').css('color', this.state.textColor);\r\n        $('.loadingWrapper').css('background-color', this.state.backgroundColor);\r\n        // $('.ud-dashboard').css('background-color', this.state.backgroundColor);\r\n        // $('.ud-dashboard').css('color', this.state.textColor);\r\n    }\r\n\r\n    loadData() {        \r\n        fetchGet(\"/api/internal/dashboard/loadingoptions\", function(json){\r\n            if(this.state.cancelData){\r\n                return;\r\n            }\r\n            var propsToSet = Object.assign({}, this.state);\r\n            \r\n            if(json.showSplash !== null && json.showSplash !== undefined){\r\n                propsToSet.showSplash = json.showSplash;\r\n            }\r\n            if(json.backgroundColor && json.backgroundColor !== null){\r\n                propsToSet.backgroundColor = json.backgroundColor.htmlColor;\r\n            }\r\n            if(json.textColor){\r\n                propsToSet.textColor = json.textColor.htmlColor;\r\n            }\r\n            if(json.text){\r\n                propsToSet.text = json.text;\r\n            }\r\n            propsToSet.loadingOpts = false;\r\n\r\n            if(!this.state.cancelData){\r\n                this.setState(propsToSet);\r\n                \r\n            }\r\n            this.setColors();\r\n        }.bind(this));\r\n    }\r\n\r\n    render() {\r\n        return <div className='loadingWrapper' style={{height: '100%', width: '100%', display: 'flex'}}>\r\n                    <Row style={{height: '90vh', minHeight: '90vh', display: (!this.state.loadingOpts && this.state.showSplash) ? 'block' : 'none'}}>\r\n                        <div className=\"valign-wrapper center-align\" style={{height: '90vh'}}>\r\n                            <div>\r\n                                <h1>{this.state.text}</h1>\r\n                                <div className=\"progress\">\r\n                                    <div className=\"indeterminate\"></div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                </Row>\r\n               </div>\r\n    }\r\n}"],"sourceRoot":""}
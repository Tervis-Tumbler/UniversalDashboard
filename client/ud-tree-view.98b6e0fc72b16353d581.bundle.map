{"version":3,"sources":["webpack:///./src/app/ud-treeview.jsx"],"names":["UDTreeView","props","state","data","node","onToggle","bind","toggled","fetchPost","id","nodeId","children","cursor","active","setState","decorators","Header","style","iconType","icon","iconClass","iconStyle","marginRight","base","title","name","tree","listStyle","backgroundColor","margin","marginTop","padding","color","fontColor","fontFamily","fontSize","position","link","display","activeLink","background","activeBackgroundColor","toggle","verticalAlign","marginLeft","height","width","wrapper","top","left","arrow","fill","toggleColor","strokeWidth","header","connector","borderLeft","borderBottom","lineHeight","subtree","paddingLeft","loading","React","Component"],"mappings":"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","file":"ud-tree-view.98b6e0fc72b16353d581.bundle.js","sourcesContent":["import React from 'react';\r\nimport {Treebeard, decorators} from 'react-treebeard';\r\nimport {fetchPost} from './services/fetch-service';\r\n\r\n\r\nexport default class UDTreeView extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data : this.props.node\r\n        };\r\n        this.onToggle = this.onToggle.bind(this);\r\n    }\r\n\r\n    onToggle(node, toggled)\r\n    {\r\n        fetchPost('/api/internal/component/element/' + this.props.id, { nodeId: node.id}, function(data) {\r\n            node.children = data;\r\n            if(this.state.cursor){this.state.cursor.active = false;}\r\n            \r\n            node.active = true;\r\n            \r\n            if(node.children){ \r\n                node.toggled = toggled; \r\n            }\r\n\r\n            this.setState({ cursor: node })\r\n            \r\n        }.bind(this))\r\n    }\r\n\r\n    render(){\r\n\r\n        decorators.Header = ({style, node}) => {\r\n            const iconType = node.icon;\r\n            const iconClass = `fa fa-${iconType}`;\r\n            const iconStyle = {marginRight: '5px'};\r\n        \r\n            return (\r\n                <div style={style.base} id={node.id}>\r\n                    <div style={style.title}>\r\n                        <i className={iconClass} style={iconStyle}/>\r\n        \r\n                        {node.name}\r\n                    </div>\r\n                </div>\r\n            );\r\n        };\r\n\r\n        var style = {\r\n            tree: {\r\n                base: {\r\n                    listStyle: 'none',\r\n                    backgroundColor: this.props.backgroundColor,\r\n                    margin: 0,\r\n                    marginTop: '5px',\r\n                    padding: 0,\r\n                    color: this.props.fontColor,\r\n                    fontFamily: 'lucida grande ,tahoma,verdana,arial,sans-serif',\r\n                    fontSize: '14px'\r\n                },\r\n                node: {\r\n                    base: {\r\n                        position: 'relative'\r\n                    },\r\n                    link: {\r\n                        cursor: 'pointer',\r\n                        position: 'relative',\r\n                        padding: '0px 5px',\r\n                        display: 'block'\r\n                    },\r\n                    activeLink: {\r\n                        background: this.props.activeBackgroundColor\r\n                    },\r\n                    toggle: {\r\n                        base: {\r\n                            position: 'relative',\r\n                            display: 'inline-block',\r\n                            verticalAlign: 'top',\r\n                            marginLeft: '-5px',\r\n                            height: '24px',\r\n                            width: '24px'\r\n                        },\r\n                        wrapper: {\r\n                            position: 'absolute',\r\n                            top: '50%',\r\n                            left: '50%',\r\n                            margin: '-7px 0 0 -7px',\r\n                            height: '14px'\r\n                        },\r\n                        height: 14,\r\n                        width: 14,\r\n                        arrow: {\r\n                            fill: this.props.toggleColor,\r\n                            strokeWidth: 0\r\n                        }\r\n                    },\r\n                    header: {\r\n                        base: {\r\n                            display: 'inline-block',\r\n                            verticalAlign: 'top',\r\n                            color: this.props.fontColor\r\n                        },\r\n                        connector: {\r\n                            width: '2px',\r\n                            height: '12px',\r\n                            borderLeft: 'solid 2px black',\r\n                            borderBottom: 'solid 2px black',\r\n                            position: 'absolute',\r\n                            top: '0px',\r\n                            left: '-21px'\r\n                        },\r\n                        title: {\r\n                            lineHeight: '24px',\r\n                            verticalAlign: 'middle'\r\n                        }\r\n                    },\r\n                    subtree: {\r\n                        listStyle: 'none',\r\n                        paddingLeft: '19px'\r\n                    },\r\n                    loading: {\r\n                        color: '#E2C089'\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return (\r\n            <Treebeard\r\n                data={this.state.data}\r\n                onToggle={this.onToggle}\r\n                style={style}\r\n            />\r\n        );\r\n    }\r\n}"],"sourceRoot":""}